{"name":"Briareus","tagline":"Accelerating Python Applications using Cloud","body":"# 使用/Usage\r\n\r\n在程序的第一行：   \r\nIn the first line of your source:\r\n\r\n    from Briareus import patch; patch()\r\n    \r\n## 接口/Interfaces\r\n\r\n全部使用注释，包括   \r\nAll interfaces are special comment, including\r\n\r\n    # remote\r\n    \r\n    # async\r\n    \r\n    # parallelize\r\n    \r\n### `#remote`\r\n\r\n使用 `#remote` 修饰的函数会分发到云平台上计算   \r\nThe functions marked by `#remote` will be migrating to cloud:\r\n\r\n### `#async`\r\n\r\n使用 `#async` 修饰的函数会被异步执行，其后的语句不等待该函数完成即开始执行，但保证需要使用函数返回值式函数已执行完成。   \r\nA function marked by `#async` will be called in an asynchronous way. Following functions will be start do not need to wait for this function's finish.\r\n\r\n### `#parallelize`\r\n\r\n使用`#parallelize` 修饰的`for`循环、`map`调用和列表解析将会被并行执行（使用该注释修饰的循环假设没有数据依赖）。      \r\nAny `for` loop, `map` loop and list comprehension marked by comment `#paralleliz` will be evaluated in parallel. BUT IT IS PROGRAMMERS' DUTIES TO MAKE SURE THE LOOPS CAN BE PARALLELIZED.\r\n    \r\n如果循环中有部分同时使用了`# remote`分发到云平台上计算，可以使用更复杂的形式：     \r\nIf there is any function that had been marked by comment `# remote`, there are more complex forms for `# parallelize` like,\r\n\r\n    # parallelize with consts A, B and C\r\n    \r\n    # parallelize with cached R\r\n    \r\n这种情况下，`A`、`B`、`C`、`D`会被在云平台上缓存。（`A`、`B`、`C`和`D`需要是常量）      \r\nIn these examples, variants `A`, `B`, `C` and `D` will be cached un the cloud platform (assuming these variants are constant).\r\n\r\n# 配置/Configuration\r\n\r\n## 配置文件位置/Location of configuration files.\r\n\r\n按顺序从以下位置读取配置文件，后一个位置配置文件中的项覆盖之前的配置      \r\nBrareus read the configurations form below locations sequentially.\r\n\r\n1. /etc/briareus.conf\r\n2. ~/.briareus.conf\r\n3. ./briareus.conf\r\n    \r\n \r\n## 配置文件格式/Format of configuration files\r\n\r\n    {\r\n        \"host\": \"192.168.70.150\",    #Address of cloud platform\r\n        \"port\": 6379,                #Optional, port of Briareus\r\n    }\r\n    \r\n# 示例/Examples\r\n\r\n    # remote\r\n    def foo(…):\r\n        …\r\n        \r\n    foo()\r\n    \r\n`foo()`将分发到远程进行      \r\n`foo()` will be migrated to remote cloud platform\r\n\r\n    # async\r\n    def foo1(…):\r\n        …\r\n        \r\n    # async\r\n    def foo2(…):\r\n        …\r\n        \r\n    a = foo1(…)\r\n    b = foo2(…)\r\n    c = foo2(…)\r\n    \r\n    bar(a, b, c)\r\n    \r\n`a=foo1(…)`，`b=foo2(…)`和`c = foo2(…)`将并行（异步）进行，`bar(a,b,c)`则等待`a`、`b`、`c`的求值都完成之后再进行。      \r\n`a=foo1(…)`，`b=foo2(…)` and `c = foo2(…)` will be evaluated at the same time, and the evaluation of `bar(a,b,c)` will be started after all of `a`, `b` and `c` being calculated.\r\n    \r\n    #parallelize\r\n    for … in …:\r\n        …\r\n    \r\n`for`循环将并行进行。      \r\nThe `for` loop will be evaluated in parallel.\r\n\r\n    #remote\r\n    def func(A):\r\n        …\r\n        \r\n    #parallelize with cached a\r\n    for … in …:\r\n        …\r\n        func(a)\r\n        …\r\n        \r\n`for`循环将并行执行，其中`func(a)`将被（并行）分发到云平台执行，a会在云平台被缓存。      \r\nThe `for` loop will be evaluated in parallel, the evaluation of `func(q)` will be migrated to cloud, and const `a` will be cached in cloud.\r\n\r\n\r\n    ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}